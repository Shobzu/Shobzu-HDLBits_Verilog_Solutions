HDLBits HDLBits
Problem Set
Browse Problem Set
Problem Set Stats
User Rank List
Simulation
Run a Simulation (Icarus Verilog)
My Profile
Log in/out
Profile Settings
My Stats
Help
Getting Started
About HDLBits
Bugs and Suggestions
01xz.net
01xz.net Home
HDLBits — Verilog practice
ASMBits — Assembly language practice
CPUlator — Nios II, ARMv7, and MIPS simulator
Search HDLBits
 Search
Lemmings1
exams/ece241_2013_q4PreviousNextlemmings2

The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine.

In the Lemmings' 2D world, Lemmings can be in one of two states: walking left or walking right. It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left, it will walk right. If it's bumped on the right, it will walk left. If it's bumped on both sides at the same time, it will still switch directions.

Implement a Moore state machine with two states, two inputs, and one output that models this behaviour.

clk
bump_left
bump_right
walk_left
walk_right

See also: Lemmings2, Lemmings3, and Lemmings4.

Module Declaration
module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    output walk_left,
    output walk_right); 
Hint...
Write your solution here

[Load a previous submission]
Load
(
module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    output walk_left,
    output walk_right); //  
​
    parameter LEFT=0, RIGHT=1;
    reg state, next_state;
​
    always @(*) begin
        // State transition logic
        case(state)
            LEFT : begin
                if(bump_left) 
                next_state = RIGHT;
                else next_state = LEFT;
            end
            RIGHT : begin
                if(bump_right) 
                next_state = LEFT;
                else next_state = RIGHT;
            end
            default : next_state = LEFT;
        endcase
    end
​
    always @(posedge clk, posedge areset) begin
        // State flip-flops with asynchronous reset
        if(areset) begin
            state <= LEFT;
        end
        else state <= next_state;
    end
​
    // Output logic
    assign walk_left = (state == LEFT);
    assign walk_right = (state == RIGHT);
​
endmodule
​
 
Upload a source file... 
Show solution
Solution


fsm1sfsm2fsm2sfsm3combfsm3onehotfsm3fsm3sexams/ece241_2013_q4 ·
lemmings1

 
· lemmings2lemmings3lemmings4fsm_onehotfsm_ps2fsm_ps2datafsm_serialfsm_serialdata
exams/ece241_2013_q4PreviousNextlemmings2
This page was last edited on 14 December 2015, at 02:14.
About HDLBits
