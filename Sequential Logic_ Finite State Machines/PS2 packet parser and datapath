module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output done); //

    reg [23:0] out;
    // FSM from fsm_ps2
    parameter byte1 = 0 , byte2 = 1 , byte3 = 2, found = 3;
    reg[1:0] state , next_state;
    // State transition logic (combinational)
    always@(*)begin
        case(state)
            byte1 : next_state = in[3] ? byte2 : byte1;
            byte2 : next_state = byte3;
            byte3 : next_state = found;
            found  : next_state = in[3] ? byte2 : byte1;
            default : next_state = byte1;
        endcase
    end
    // State flip-flops (sequential)
    always@(posedge clk)begin
        if(reset) state <= byte1;
        else state <= next_state;
    end

    // New: Datapath to store incoming bytes.
     always @(posedge clk) begin
         if (reset) out <= 24'b0; // Reset the datapath
         else out <= {out[15:0],in};
    end
    assign done = (state == found);
    assign out_bytes = done ? out : 24'b0;
endmodule
